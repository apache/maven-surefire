  ------
  Introduction
  ------
  Stephen Connolly
  Allan Ramirez
  ------
  2011-06-27
  ------
  
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html
  

Maven ${thisPlugin} Plugin


  Requirements: Maven 2.2.1 or 3.x, and JDK 1.6 or higher. Due to wrong formatting of console text messages
  in Maven Version prior to 3.1.0 it is highly recommended to use Maven 3.1.0 or higher.

#{if}(${project.artifactId}=="maven-surefire-plugin")
  The Surefire Plugin is used during the <<<test>>> phase of the build
  lifecycle to execute the unit tests of an application. It generates reports
  in two different file formats:
#{else}
  The Failsafe Plugin is designed to run integration tests while the Surefire Plugin is designed to run unit tests.
  The name (failsafe) was chosen both because it is a synonym of surefire and because it implies that when it fails, it
  does so in a safe way.

  The Maven lifecycle has four phases for running integration tests:

  * <<<pre-integration-test>>> for setting up the integration test environment.

  * <<<integration-test>>> for running the integration tests.

  * <<<post-integration-test>>> for tearing down the integration test environment.

  * <<<verify>>> for checking the results of the integration tests.

  []

  If you use the Surefire Plugin for running tests, then when you have a test failure, the build will stop at the
  <<<integration-test>>> phase and your integration test environment will not have been torn down correctly.

  The Failsafe Plugin is used during the <<<integration-test>>> and <<<verify>>> phases of the build
  lifecycle to execute the integration tests of an application. The Failsafe Plugin will not fail the build during
  the <<<integration-test>>> phase, thus enabling the <<<post-integration-test>>> phase to execute.

  NOTE: when running integration tests, you should invoke Maven with the (shorter to type too)

+---+
mvn verify
+---+

  rather than trying to invoke the <<<integration-test>>> phase directly, as otherwise the <<<post-integration-test>>>
  phase will not be executed.

  The Failsafe Plugin generates reports in two different file formats:

#{end}

  * Plain text files (<<<*.txt>>>)

  * XML files (<<<*.xml>>>)

  []

  By default, these files are generated in <<<$\{basedir\}/target/${thisPlugin.toLowerCase()}-reports/TEST-*.xml>>>.

  The schema for the ${thisPlugin} XML reports is available at
  {{{./xsd/${thisPlugin.toLowerCase()}-test-report.xsd}${thisPlugin} XML Report Schema}}.

  For an HTML format of the report, please see the
  {{{http://maven.apache.org/plugins/maven-surefire-report-plugin/}Maven Surefire Report Plugin}}.

#{if}(${project.artifactId}=="maven-failsafe-plugin")
  By default this plugin generates summary XML file at <<<$\{basedir\}/target/failsafe-reports/failsafe-summary.xml>>>
  and the schema is available at {{{./xsd/failsafe-summary.xsd}Failsafe XML Summary Schema}}.
#{end}

* Goals Overview

#{if}(${project.artifactId}=="maven-surefire-plugin")
  The Surefire Plugin has only one goal:

  * {{{./test-mojo.html}surefire:test}} runs the unit tests of an application.

  []

#{else}
  The Failsafe Plugin has only two goals:

  * {{{./integration-test-mojo.html}failsafe:integration-test}} runs the integration tests of an application.

  * {{{./verify-mojo.html}failsafe:verify}} verifies that the integration tests of an application passed.

  []

#{end}

* Usage

  General instructions on how to use the ${thisPlugin} Plugin can be found on the {{{./usage.html}usage page}}. Some more
  specific use cases are described in the examples listed below.
  #{if}(${project.artifactId}=="maven-surefire-plugin") Last but not least, users occasionally contribute
  additional examples, tips or errata to the
  {{{http://docs.codehaus.org/display/MAVENUSER/Surefire+Plugin}plugin's wiki page}}.#{end}

  In case you still have questions regarding the plugin's usage, please have a look at the {{{./faq.html}FAQ}} and feel
  free to contact the {{{./mail-lists.html}user mailing list}}. The posts to the mailing list are archived and could
  already contain the answer to your question as part of an older thread. Hence, it is also worth browsing/searching
  the {{{./mail-lists.html}mail archive}}.

  If you feel like the plugin is missing a feature or has a defect, you can file a feature request or bug report in our
  {{{./issue-tracking.html}issue tracker}}. When creating a new issue, please provide a comprehensive description of your
  concern. Especially for fixing bugs it is crucial that the developers can reproduce your problem. For this reason,
  entire debug logs, POMs or most preferably little demo projects attached to the issue are very much appreciated.
  Of course, patches are welcome, too. Contributors can check out the project from our
  {{{./source-repository.html}source repository}} and will find supplementary information in the
  {{{http://maven.apache.org/guides/development/guide-helping.html}guide to helping with Maven}}.

* Examples

  The following examples show how to use the ${thisPlugin} Plugin in more advanced use cases:

  * {{{./examples/testng.html}Using TestNG}}

  * {{{./examples/junit.html}Using JUnit}}

  * {{{./examples/pojo-test.html}Using POJO Tests}}

  * {{{./examples/skipping-tests.html}Skipping Tests}}

  * {{{./examples/skip-after-failure.html}Skip After Failure}}

  * {{{./examples/inclusion-exclusion.html}Inclusions and Exclusions of Tests}}

  * {{{./examples/single-test.html}Running a Single Test}}

  * {{{./examples/rerun-failing-tests.html}Re-run Failing Tests}}

  * {{{./examples/class-loading.html}Class Loading and Forking}}

  * {{{./examples/debugging.html}Debugging Tests}}

  * {{{./examples/system-properties.html}Using System Properties}}

  * {{{./examples/configuring-classpath.html}Configuring the Classpath}}

  * {{{./examples/providers.html}Selecting Providers}}

  * {{{./examples/fork-options-and-parallel-execution.html}Fork Options and Parallel Test Execution}}

  * {{{./examples/logging.html}Using Console Logs}}

  * {{{./examples/shutdown.html}Shutdown of Forked JVM}}

  []
